PROGRAM ::= { DEF_FUNCTION | DEF_STRUCT | OPERATOR }

DEF_FUNCTION ::= "function" IDENTIFIER "(" [IDENTIFIERS_LIST] ")" BLOCK

DEF_STRUCT ::= "struct" IDENTIFIER "{" IDENTIFIERS_LIST "}"

OPERATOR ::= DEF_VARIABLES |
	SEMICOLON |
	CONDITIONAL_OPERATOR
	LOOP_FOR |
	EXPRESSION_OPERATOR

IDENTIFIERS_LIST ::= IDENTIFIER { "," IDENTIFIER }

BLOCK ::= "{" OPERATOR {OPERATOR} "}"

DEF_VARIABLES ::= "var" DEF_SINGLE_VARIABLE { "," DEF_SINGLE_VARIABLE } ";"

CONDITIONAL_OPERATOR ::= "if" "(" EXP ")" OPERATOR [ "else" OPERATOR ]

LOOP_FOR ::= "for" "(" [EXPRESSION] ";" [EXPRESSION] ";" [EXPRESSION] ")" OPERATOR

DEF_SINGLE_VARIABLE ::= IDENTIFIER ["=" ("[" [EXPRESSION] "]" | EXPRESSION)]

EXPRESSION_OPERATOR ::= EXPRESSION ";"

EXPRESSION ::= CONJUNCTION { "||" CONJUNCTION }

CONJUNCTION ::= BIT_OR { "&&" BIT_OR }

BIT_OR ::= BIT_XOR { "|" BIT_XOR }

BIT_XOR ::= BIT_AND { "^" BIT_AND }

BIT_AND ::= EQUALITY { "&" EQUALITY }

EQUALITY ::= COMPARISON { ("==" | "!=") COMPARISON }

COMPARISON ::= BIT_SHIFTING { (">" | "<" | ">="| "<=") BIT_SHIFTING }

BIT_SHIFTING ::= ADDITION { (">>" | "<<") ADDITION }

ADDITION ::= MULTIPLICATION { ("+" | "-") MULTIPLICATION }

MULTIPLICATION ::= UNARY { "*" | "/" | "%" UNARY}

UNARY ::= [ ( "-" | "~" | "!") ] VALUE

VALUE ::= CONST | "(" EXPRESSION ")" |
	"new" IDENTIFIER "(" EXPRESSIONS_LIST ")" | //new structure creation
	IDENTIFIER (
		"(" [EXPRESSIONS_LIST] ")" | // function call
		 "." IDENTIFIER "(" [EXPRESSIONS_LIST] ")" //method call
		 [ { "[" EXPRESSION "]" } ] [ "=" EXPRESSION ] | //multidimentional array (?)
		 )
	
EXPRESSIONS_LIST ::= EXPRESSION { "," EXPRESSION }


