PROGRAM ::= [{ (DEF_FUNCTION | DEF_STRUCT) }] "main" BLOCK

DEF_FUNCTION ::= "function" IDENTIFIER "(" IDENTIFIERS_LIST ")" BLOCK

DEF_STRUCT ::= "struct" IDENTIFIER "{" IDENTIFIERS_LIST "}"

OPERATOR ::= DEF_VARIABLES |
	CONDITIONAL_OPERATOR
	LOOP_FOR |
	EXPRESSION_OPERATOR |
	BLOCK |
	EMPTY_OPERATOR

IDENTIFIERS_LIST ::= IDENTIFIER { "," IDENTIFIER }

DEF_VARIABLES ::= "var" DEF_SINGLE_VARIABLE { "," DEF_SINGLE_VARIABLE } ";"

CONDITIONAL_OPERATOR ::= "if" "(" EXPRESSION ")" OPERATOR ["else" OPERATOR]

LOOP_FOR ::= "for" "(" [EXPRESSION] ";" [EXPRESSION] ";" [EXPRESSION] ")" OPERATOR

DEF_SINGLE_VARIABLE ::= IDENTIFIER ["=" EXPRESSION]

EXPRESSION_OPERATOR ::= EXPRESSION ";"

BLOCK ::= "{" OPERATOR { OPERATOR } "}"

EMPTY_OPERATOR ::= ";"

EXPRESSION ::= CONJUNCTION { "||" CONJUNCTION }

CONJUNCTION ::= BIT_OR { "&&" BIT_OR }

BIT_OR ::= BIT_XOR { "|" BIT_XOR }

BIT_XOR ::= BIT_AND { "^" BIT_AND }

BIT_AND ::= EQUALITY { "&" EQUALITY }

EQUALITY ::= COMPARISON { ("==" | "!=") COMPARISON }

COMPARISON ::= BIT_SHIFTING { (">" | "<" | ">="| "<=") BIT_SHIFTING }

BIT_SHIFTING ::= ADDITION { (">>" | "<<") ADDITION }

ADDITION ::= MULTIPLICATION { ("+" | "-") MULTIPLICATION }

MULTIPLICATION ::= UNARY { "*" | "/" | "%" UNARY }

UNARY ::= [( "~" | "!")] VALUE

VALUE ::= CONST |
    "[" [EXPRESSIONS_LIST] "]" [CHAIN] | //new array creation
	"new" IDENTIFIER "(" EXPRESSIONS_LIST ")" | //new structure creation
	"(" EXPRESSION ")" [CHAIN] |
	BLOCK |
	IDENTIFIER ("=" EXPRESSION | [CHAIN])
	
EXPRESSIONS_LIST ::= EXPRESSION { "," EXPRESSION }

CHAIN ::=
    '\' "(" IDENTIFIERS_LIST ")" EXPRESSION [CHAIN] | //lambda creation
    "(" EXPRESSIONS_LIST ")" [CHAIN] |   // function call
    "." IDENTIFIER "(" [EXPRESSIONS_LIST] ")" [CHAIN] |  //method call
    "[" EXPRESSION "]" ("=" EXPRESSION | [CHAIN])   // array indexing
    "->" IDENTIFIER ("=" EXPRESSION | [CHAIN]) //property
